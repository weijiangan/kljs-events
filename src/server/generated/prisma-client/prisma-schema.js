module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Activity {
  id: ID!
  type: ActivityType!
  title: String!
  description: String
  length: Int!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ActivityConnection {
  pageInfo: PageInfo!
  edges: [ActivityEdge]!
  aggregate: AggregateActivity!
}

input ActivityCreateInput {
  id: ID
  type: ActivityType!
  title: String!
  description: String
  length: Int!
  links: LinkCreateManyInput
}

input ActivityCreateOneInput {
  create: ActivityCreateInput
  connect: ActivityWhereUniqueInput
}

type ActivityEdge {
  node: Activity!
  cursor: String!
}

enum ActivityOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  length_ASC
  length_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ActivityPreviousValues {
  id: ID!
  type: ActivityType!
  title: String!
  description: String
  length: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ActivitySubscriptionPayload {
  mutation: MutationType!
  node: Activity
  updatedFields: [String!]
  previousValues: ActivityPreviousValues
}

input ActivitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActivityWhereInput
  AND: [ActivitySubscriptionWhereInput!]
  OR: [ActivitySubscriptionWhereInput!]
  NOT: [ActivitySubscriptionWhereInput!]
}

enum ActivityType {
  TALK
  BASIC
}

input ActivityUpdateDataInput {
  type: ActivityType
  title: String
  description: String
  length: Int
  links: LinkUpdateManyInput
}

input ActivityUpdateInput {
  type: ActivityType
  title: String
  description: String
  length: Int
  links: LinkUpdateManyInput
}

input ActivityUpdateManyMutationInput {
  type: ActivityType
  title: String
  description: String
  length: Int
}

input ActivityUpdateOneRequiredInput {
  create: ActivityCreateInput
  update: ActivityUpdateDataInput
  upsert: ActivityUpsertNestedInput
  connect: ActivityWhereUniqueInput
}

input ActivityUpsertNestedInput {
  update: ActivityUpdateDataInput!
  create: ActivityCreateInput!
}

input ActivityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: ActivityType
  type_not: ActivityType
  type_in: [ActivityType!]
  type_not_in: [ActivityType!]
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
}

input ActivityWhereUniqueInput {
  id: ID
}

type AggregateActivity {
  count: Int!
}

type AggregateCoordinates {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateEventActivity {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregateSocialProfile {
  count: Int!
}

type AggregateTalk {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVenue {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Coordinates {
  id: ID!
  x: Float!
  y: Float!
}

type CoordinatesConnection {
  pageInfo: PageInfo!
  edges: [CoordinatesEdge]!
  aggregate: AggregateCoordinates!
}

input CoordinatesCreateInput {
  id: ID
  x: Float!
  y: Float!
}

input CoordinatesCreateOneInput {
  create: CoordinatesCreateInput
  connect: CoordinatesWhereUniqueInput
}

type CoordinatesEdge {
  node: Coordinates!
  cursor: String!
}

enum CoordinatesOrderByInput {
  id_ASC
  id_DESC
  x_ASC
  x_DESC
  y_ASC
  y_DESC
}

type CoordinatesPreviousValues {
  id: ID!
  x: Float!
  y: Float!
}

type CoordinatesSubscriptionPayload {
  mutation: MutationType!
  node: Coordinates
  updatedFields: [String!]
  previousValues: CoordinatesPreviousValues
}

input CoordinatesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CoordinatesWhereInput
  AND: [CoordinatesSubscriptionWhereInput!]
  OR: [CoordinatesSubscriptionWhereInput!]
  NOT: [CoordinatesSubscriptionWhereInput!]
}

input CoordinatesUpdateDataInput {
  x: Float
  y: Float
}

input CoordinatesUpdateInput {
  x: Float
  y: Float
}

input CoordinatesUpdateManyMutationInput {
  x: Float
  y: Float
}

input CoordinatesUpdateOneInput {
  create: CoordinatesCreateInput
  update: CoordinatesUpdateDataInput
  upsert: CoordinatesUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CoordinatesWhereUniqueInput
}

input CoordinatesUpsertNestedInput {
  update: CoordinatesUpdateDataInput!
  create: CoordinatesCreateInput!
}

input CoordinatesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  x: Float
  x_not: Float
  x_in: [Float!]
  x_not_in: [Float!]
  x_lt: Float
  x_lte: Float
  x_gt: Float
  x_gte: Float
  y: Float
  y_not: Float
  y_in: [Float!]
  y_not_in: [Float!]
  y_lt: Float
  y_lte: Float
  y_gt: Float
  y_gte: Float
  AND: [CoordinatesWhereInput!]
  OR: [CoordinatesWhereInput!]
  NOT: [CoordinatesWhereInput!]
}

input CoordinatesWhereUniqueInput {
  id: ID
}

scalar DateTime

type Event {
  id: ID!
  name: String!
  attendees(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  organizer: User!
  agenda(where: EventActivityWhereInput, orderBy: EventActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventActivity!]
  venue: Venue
  timeStart: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EventActivity {
  id: ID!
  order: Int!
  activity: Activity!
}

type EventActivityConnection {
  pageInfo: PageInfo!
  edges: [EventActivityEdge]!
  aggregate: AggregateEventActivity!
}

input EventActivityCreateInput {
  id: ID
  order: Int!
  activity: ActivityCreateOneInput!
}

input EventActivityCreateManyInput {
  create: [EventActivityCreateInput!]
  connect: [EventActivityWhereUniqueInput!]
}

type EventActivityEdge {
  node: EventActivity!
  cursor: String!
}

enum EventActivityOrderByInput {
  id_ASC
  id_DESC
  order_ASC
  order_DESC
}

type EventActivityPreviousValues {
  id: ID!
  order: Int!
}

input EventActivityScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [EventActivityScalarWhereInput!]
  OR: [EventActivityScalarWhereInput!]
  NOT: [EventActivityScalarWhereInput!]
}

type EventActivitySubscriptionPayload {
  mutation: MutationType!
  node: EventActivity
  updatedFields: [String!]
  previousValues: EventActivityPreviousValues
}

input EventActivitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventActivityWhereInput
  AND: [EventActivitySubscriptionWhereInput!]
  OR: [EventActivitySubscriptionWhereInput!]
  NOT: [EventActivitySubscriptionWhereInput!]
}

input EventActivityUpdateDataInput {
  order: Int
  activity: ActivityUpdateOneRequiredInput
}

input EventActivityUpdateInput {
  order: Int
  activity: ActivityUpdateOneRequiredInput
}

input EventActivityUpdateManyDataInput {
  order: Int
}

input EventActivityUpdateManyInput {
  create: [EventActivityCreateInput!]
  update: [EventActivityUpdateWithWhereUniqueNestedInput!]
  upsert: [EventActivityUpsertWithWhereUniqueNestedInput!]
  delete: [EventActivityWhereUniqueInput!]
  connect: [EventActivityWhereUniqueInput!]
  set: [EventActivityWhereUniqueInput!]
  disconnect: [EventActivityWhereUniqueInput!]
  deleteMany: [EventActivityScalarWhereInput!]
  updateMany: [EventActivityUpdateManyWithWhereNestedInput!]
}

input EventActivityUpdateManyMutationInput {
  order: Int
}

input EventActivityUpdateManyWithWhereNestedInput {
  where: EventActivityScalarWhereInput!
  data: EventActivityUpdateManyDataInput!
}

input EventActivityUpdateWithWhereUniqueNestedInput {
  where: EventActivityWhereUniqueInput!
  data: EventActivityUpdateDataInput!
}

input EventActivityUpsertWithWhereUniqueNestedInput {
  where: EventActivityWhereUniqueInput!
  update: EventActivityUpdateDataInput!
  create: EventActivityCreateInput!
}

input EventActivityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  activity: ActivityWhereInput
  AND: [EventActivityWhereInput!]
  OR: [EventActivityWhereInput!]
  NOT: [EventActivityWhereInput!]
}

input EventActivityWhereUniqueInput {
  id: ID
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  name: String!
  attendees: UserCreateManyInput
  organizer: UserCreateOneInput!
  agenda: EventActivityCreateManyInput
  venue: VenueCreateOneInput
  timeStart: Int
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  timeStart_ASC
  timeStart_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EventPreviousValues {
  id: ID!
  name: String!
  timeStart: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateInput {
  name: String
  attendees: UserUpdateManyInput
  organizer: UserUpdateOneRequiredInput
  agenda: EventActivityUpdateManyInput
  venue: VenueUpdateOneInput
  timeStart: Int
}

input EventUpdateManyMutationInput {
  name: String
  timeStart: Int
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  attendees_every: UserWhereInput
  attendees_some: UserWhereInput
  attendees_none: UserWhereInput
  organizer: UserWhereInput
  agenda_every: EventActivityWhereInput
  agenda_some: EventActivityWhereInput
  agenda_none: EventActivityWhereInput
  venue: VenueWhereInput
  timeStart: Int
  timeStart_not: Int
  timeStart_in: [Int!]
  timeStart_not_in: [Int!]
  timeStart_lt: Int
  timeStart_lte: Int
  timeStart_gt: Int
  timeStart_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

type Link {
  id: ID!
  type: LinkType!
  url: String!
  description: String
}

type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  id: ID
  type: LinkType!
  url: String!
  description: String
}

input LinkCreateManyInput {
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

type LinkEdge {
  node: Link!
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  url_ASC
  url_DESC
  description_ASC
  description_DESC
}

type LinkPreviousValues {
  id: ID!
  type: LinkType!
  url: String!
  description: String
}

input LinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: LinkType
  type_not: LinkType
  type_in: [LinkType!]
  type_not_in: [LinkType!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  NOT: [LinkScalarWhereInput!]
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
  AND: [LinkSubscriptionWhereInput!]
  OR: [LinkSubscriptionWhereInput!]
  NOT: [LinkSubscriptionWhereInput!]
}

enum LinkType {
  YOUTUBE
  SLIDES
  OTHER
}

input LinkUpdateDataInput {
  type: LinkType
  url: String
  description: String
}

input LinkUpdateInput {
  type: LinkType
  url: String
  description: String
}

input LinkUpdateManyDataInput {
  type: LinkType
  url: String
  description: String
}

input LinkUpdateManyInput {
  create: [LinkCreateInput!]
  update: [LinkUpdateWithWhereUniqueNestedInput!]
  upsert: [LinkUpsertWithWhereUniqueNestedInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyMutationInput {
  type: LinkType
  url: String
  description: String
}

input LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput!
  data: LinkUpdateManyDataInput!
}

input LinkUpdateWithWhereUniqueNestedInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateDataInput!
}

input LinkUpsertWithWhereUniqueNestedInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateDataInput!
  create: LinkCreateInput!
}

input LinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: LinkType
  type_not: LinkType
  type_in: [LinkType!]
  type_not_in: [LinkType!]
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createActivity(data: ActivityCreateInput!): Activity!
  updateActivity(data: ActivityUpdateInput!, where: ActivityWhereUniqueInput!): Activity
  updateManyActivities(data: ActivityUpdateManyMutationInput!, where: ActivityWhereInput): BatchPayload!
  upsertActivity(where: ActivityWhereUniqueInput!, create: ActivityCreateInput!, update: ActivityUpdateInput!): Activity!
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteManyActivities(where: ActivityWhereInput): BatchPayload!
  createCoordinates(data: CoordinatesCreateInput!): Coordinates!
  updateCoordinates(data: CoordinatesUpdateInput!, where: CoordinatesWhereUniqueInput!): Coordinates
  updateManyCoordinateses(data: CoordinatesUpdateManyMutationInput!, where: CoordinatesWhereInput): BatchPayload!
  upsertCoordinates(where: CoordinatesWhereUniqueInput!, create: CoordinatesCreateInput!, update: CoordinatesUpdateInput!): Coordinates!
  deleteCoordinates(where: CoordinatesWhereUniqueInput!): Coordinates
  deleteManyCoordinateses(where: CoordinatesWhereInput): BatchPayload!
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createEventActivity(data: EventActivityCreateInput!): EventActivity!
  updateEventActivity(data: EventActivityUpdateInput!, where: EventActivityWhereUniqueInput!): EventActivity
  updateManyEventActivities(data: EventActivityUpdateManyMutationInput!, where: EventActivityWhereInput): BatchPayload!
  upsertEventActivity(where: EventActivityWhereUniqueInput!, create: EventActivityCreateInput!, update: EventActivityUpdateInput!): EventActivity!
  deleteEventActivity(where: EventActivityWhereUniqueInput!): EventActivity
  deleteManyEventActivities(where: EventActivityWhereInput): BatchPayload!
  createLink(data: LinkCreateInput!): Link!
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  createSocialProfile(data: SocialProfileCreateInput!): SocialProfile!
  updateSocialProfile(data: SocialProfileUpdateInput!, where: SocialProfileWhereUniqueInput!): SocialProfile
  updateManySocialProfiles(data: SocialProfileUpdateManyMutationInput!, where: SocialProfileWhereInput): BatchPayload!
  upsertSocialProfile(where: SocialProfileWhereUniqueInput!, create: SocialProfileCreateInput!, update: SocialProfileUpdateInput!): SocialProfile!
  deleteSocialProfile(where: SocialProfileWhereUniqueInput!): SocialProfile
  deleteManySocialProfiles(where: SocialProfileWhereInput): BatchPayload!
  createTalk(data: TalkCreateInput!): Talk!
  updateTalk(data: TalkUpdateInput!, where: TalkWhereUniqueInput!): Talk
  updateManyTalks(data: TalkUpdateManyMutationInput!, where: TalkWhereInput): BatchPayload!
  upsertTalk(where: TalkWhereUniqueInput!, create: TalkCreateInput!, update: TalkUpdateInput!): Talk!
  deleteTalk(where: TalkWhereUniqueInput!): Talk
  deleteManyTalks(where: TalkWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVenue(data: VenueCreateInput!): Venue!
  updateVenue(data: VenueUpdateInput!, where: VenueWhereUniqueInput!): Venue
  updateManyVenues(data: VenueUpdateManyMutationInput!, where: VenueWhereInput): BatchPayload!
  upsertVenue(where: VenueWhereUniqueInput!, create: VenueCreateInput!, update: VenueUpdateInput!): Venue!
  deleteVenue(where: VenueWhereUniqueInput!): Venue
  deleteManyVenues(where: VenueWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  activity(where: ActivityWhereUniqueInput!): Activity
  activities(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity]!
  activitiesConnection(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivityConnection!
  coordinates(where: CoordinatesWhereUniqueInput!): Coordinates
  coordinateses(where: CoordinatesWhereInput, orderBy: CoordinatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Coordinates]!
  coordinatesesConnection(where: CoordinatesWhereInput, orderBy: CoordinatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CoordinatesConnection!
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  eventActivity(where: EventActivityWhereUniqueInput!): EventActivity
  eventActivities(where: EventActivityWhereInput, orderBy: EventActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventActivity]!
  eventActivitiesConnection(where: EventActivityWhereInput, orderBy: EventActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventActivityConnection!
  link(where: LinkWhereUniqueInput!): Link
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  socialProfile(where: SocialProfileWhereUniqueInput!): SocialProfile
  socialProfiles(where: SocialProfileWhereInput, orderBy: SocialProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialProfile]!
  socialProfilesConnection(where: SocialProfileWhereInput, orderBy: SocialProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialProfileConnection!
  talk(where: TalkWhereUniqueInput!): Talk
  talks(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Talk]!
  talksConnection(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TalkConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  venue(where: VenueWhereUniqueInput!): Venue
  venues(where: VenueWhereInput, orderBy: VenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Venue]!
  venuesConnection(where: VenueWhereInput, orderBy: VenueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VenueConnection!
  node(id: ID!): Node
}

enum SocialNetworks {
  FACEBOOK
  TWITTER
  GITHUB
  LINKEDIN
  PERSONAL
}

type SocialProfile {
  id: ID!
  type: SocialNetworks!
  value: String!
}

type SocialProfileConnection {
  pageInfo: PageInfo!
  edges: [SocialProfileEdge]!
  aggregate: AggregateSocialProfile!
}

input SocialProfileCreateInput {
  id: ID
  type: SocialNetworks!
  value: String!
}

input SocialProfileCreateManyInput {
  create: [SocialProfileCreateInput!]
  connect: [SocialProfileWhereUniqueInput!]
}

type SocialProfileEdge {
  node: SocialProfile!
  cursor: String!
}

enum SocialProfileOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  value_ASC
  value_DESC
}

type SocialProfilePreviousValues {
  id: ID!
  type: SocialNetworks!
  value: String!
}

input SocialProfileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: SocialNetworks
  type_not: SocialNetworks
  type_in: [SocialNetworks!]
  type_not_in: [SocialNetworks!]
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [SocialProfileScalarWhereInput!]
  OR: [SocialProfileScalarWhereInput!]
  NOT: [SocialProfileScalarWhereInput!]
}

type SocialProfileSubscriptionPayload {
  mutation: MutationType!
  node: SocialProfile
  updatedFields: [String!]
  previousValues: SocialProfilePreviousValues
}

input SocialProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SocialProfileWhereInput
  AND: [SocialProfileSubscriptionWhereInput!]
  OR: [SocialProfileSubscriptionWhereInput!]
  NOT: [SocialProfileSubscriptionWhereInput!]
}

input SocialProfileUpdateDataInput {
  type: SocialNetworks
  value: String
}

input SocialProfileUpdateInput {
  type: SocialNetworks
  value: String
}

input SocialProfileUpdateManyDataInput {
  type: SocialNetworks
  value: String
}

input SocialProfileUpdateManyInput {
  create: [SocialProfileCreateInput!]
  update: [SocialProfileUpdateWithWhereUniqueNestedInput!]
  upsert: [SocialProfileUpsertWithWhereUniqueNestedInput!]
  delete: [SocialProfileWhereUniqueInput!]
  connect: [SocialProfileWhereUniqueInput!]
  set: [SocialProfileWhereUniqueInput!]
  disconnect: [SocialProfileWhereUniqueInput!]
  deleteMany: [SocialProfileScalarWhereInput!]
  updateMany: [SocialProfileUpdateManyWithWhereNestedInput!]
}

input SocialProfileUpdateManyMutationInput {
  type: SocialNetworks
  value: String
}

input SocialProfileUpdateManyWithWhereNestedInput {
  where: SocialProfileScalarWhereInput!
  data: SocialProfileUpdateManyDataInput!
}

input SocialProfileUpdateWithWhereUniqueNestedInput {
  where: SocialProfileWhereUniqueInput!
  data: SocialProfileUpdateDataInput!
}

input SocialProfileUpsertWithWhereUniqueNestedInput {
  where: SocialProfileWhereUniqueInput!
  update: SocialProfileUpdateDataInput!
  create: SocialProfileCreateInput!
}

input SocialProfileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: SocialNetworks
  type_not: SocialNetworks
  type_in: [SocialNetworks!]
  type_not_in: [SocialNetworks!]
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  AND: [SocialProfileWhereInput!]
  OR: [SocialProfileWhereInput!]
  NOT: [SocialProfileWhereInput!]
}

input SocialProfileWhereUniqueInput {
  id: ID
}

type Subscription {
  activity(where: ActivitySubscriptionWhereInput): ActivitySubscriptionPayload
  coordinates(where: CoordinatesSubscriptionWhereInput): CoordinatesSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  eventActivity(where: EventActivitySubscriptionWhereInput): EventActivitySubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  socialProfile(where: SocialProfileSubscriptionWhereInput): SocialProfileSubscriptionPayload
  talk(where: TalkSubscriptionWhereInput): TalkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  venue(where: VenueSubscriptionWhereInput): VenueSubscriptionPayload
}

type Talk {
  id: ID!
  activity: Activity!
  speaker: User!
  remarks: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TalkConnection {
  pageInfo: PageInfo!
  edges: [TalkEdge]!
  aggregate: AggregateTalk!
}

input TalkCreateInput {
  id: ID
  activity: ActivityCreateOneInput!
  speaker: UserCreateOneInput!
  remarks: String
}

type TalkEdge {
  node: Talk!
  cursor: String!
}

enum TalkOrderByInput {
  id_ASC
  id_DESC
  remarks_ASC
  remarks_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TalkPreviousValues {
  id: ID!
  remarks: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TalkSubscriptionPayload {
  mutation: MutationType!
  node: Talk
  updatedFields: [String!]
  previousValues: TalkPreviousValues
}

input TalkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TalkWhereInput
  AND: [TalkSubscriptionWhereInput!]
  OR: [TalkSubscriptionWhereInput!]
  NOT: [TalkSubscriptionWhereInput!]
}

input TalkUpdateInput {
  activity: ActivityUpdateOneRequiredInput
  speaker: UserUpdateOneRequiredInput
  remarks: String
}

input TalkUpdateManyMutationInput {
  remarks: String
}

input TalkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  activity: ActivityWhereInput
  speaker: UserWhereInput
  remarks: String
  remarks_not: String
  remarks_in: [String!]
  remarks_not_in: [String!]
  remarks_lt: String
  remarks_lte: String
  remarks_gt: String
  remarks_gte: String
  remarks_contains: String
  remarks_not_contains: String
  remarks_starts_with: String
  remarks_not_starts_with: String
  remarks_ends_with: String
  remarks_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TalkWhereInput!]
  OR: [TalkWhereInput!]
  NOT: [TalkWhereInput!]
}

input TalkWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  middleName: String
  email: String!
  password: String!
  description: String
  socials(where: SocialProfileWhereInput, orderBy: SocialProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialProfile!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  middleName: String
  email: String!
  password: String!
  description: String
  socials: SocialProfileCreateManyInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  middleName_ASC
  middleName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  description_ASC
  description_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  middleName: String
  email: String!
  password: String!
  description: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  middleName: String
  middleName_not: String
  middleName_in: [String!]
  middleName_not_in: [String!]
  middleName_lt: String
  middleName_lte: String
  middleName_gt: String
  middleName_gte: String
  middleName_contains: String
  middleName_not_contains: String
  middleName_starts_with: String
  middleName_not_starts_with: String
  middleName_ends_with: String
  middleName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  middleName: String
  email: String
  password: String
  description: String
  socials: SocialProfileUpdateManyInput
}

input UserUpdateInput {
  name: String
  middleName: String
  email: String
  password: String
  description: String
  socials: SocialProfileUpdateManyInput
}

input UserUpdateManyDataInput {
  name: String
  middleName: String
  email: String
  password: String
  description: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
  middleName: String
  email: String
  password: String
  description: String
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  middleName: String
  middleName_not: String
  middleName_in: [String!]
  middleName_not_in: [String!]
  middleName_lt: String
  middleName_lte: String
  middleName_gt: String
  middleName_gte: String
  middleName_contains: String
  middleName_not_contains: String
  middleName_starts_with: String
  middleName_not_starts_with: String
  middleName_ends_with: String
  middleName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  socials_every: SocialProfileWhereInput
  socials_some: SocialProfileWhereInput
  socials_none: SocialProfileWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Venue {
  id: ID!
  name: String!
  address: String!
  postcode: String!
  city: String!
  state: String!
  country: String!
  googPlaceId: String
  coords: Coordinates
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VenueConnection {
  pageInfo: PageInfo!
  edges: [VenueEdge]!
  aggregate: AggregateVenue!
}

input VenueCreateInput {
  id: ID
  name: String!
  address: String!
  postcode: String!
  city: String!
  state: String!
  country: String!
  googPlaceId: String
  coords: CoordinatesCreateOneInput
}

input VenueCreateOneInput {
  create: VenueCreateInput
  connect: VenueWhereUniqueInput
}

type VenueEdge {
  node: Venue!
  cursor: String!
}

enum VenueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  postcode_ASC
  postcode_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  country_ASC
  country_DESC
  googPlaceId_ASC
  googPlaceId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VenuePreviousValues {
  id: ID!
  name: String!
  address: String!
  postcode: String!
  city: String!
  state: String!
  country: String!
  googPlaceId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VenueSubscriptionPayload {
  mutation: MutationType!
  node: Venue
  updatedFields: [String!]
  previousValues: VenuePreviousValues
}

input VenueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VenueWhereInput
  AND: [VenueSubscriptionWhereInput!]
  OR: [VenueSubscriptionWhereInput!]
  NOT: [VenueSubscriptionWhereInput!]
}

input VenueUpdateDataInput {
  name: String
  address: String
  postcode: String
  city: String
  state: String
  country: String
  googPlaceId: String
  coords: CoordinatesUpdateOneInput
}

input VenueUpdateInput {
  name: String
  address: String
  postcode: String
  city: String
  state: String
  country: String
  googPlaceId: String
  coords: CoordinatesUpdateOneInput
}

input VenueUpdateManyMutationInput {
  name: String
  address: String
  postcode: String
  city: String
  state: String
  country: String
  googPlaceId: String
}

input VenueUpdateOneInput {
  create: VenueCreateInput
  update: VenueUpdateDataInput
  upsert: VenueUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: VenueWhereUniqueInput
}

input VenueUpsertNestedInput {
  update: VenueUpdateDataInput!
  create: VenueCreateInput!
}

input VenueWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  postcode: String
  postcode_not: String
  postcode_in: [String!]
  postcode_not_in: [String!]
  postcode_lt: String
  postcode_lte: String
  postcode_gt: String
  postcode_gte: String
  postcode_contains: String
  postcode_not_contains: String
  postcode_starts_with: String
  postcode_not_starts_with: String
  postcode_ends_with: String
  postcode_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  googPlaceId: String
  googPlaceId_not: String
  googPlaceId_in: [String!]
  googPlaceId_not_in: [String!]
  googPlaceId_lt: String
  googPlaceId_lte: String
  googPlaceId_gt: String
  googPlaceId_gte: String
  googPlaceId_contains: String
  googPlaceId_not_contains: String
  googPlaceId_starts_with: String
  googPlaceId_not_starts_with: String
  googPlaceId_ends_with: String
  googPlaceId_not_ends_with: String
  coords: CoordinatesWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  NOT: [VenueWhereInput!]
}

input VenueWhereUniqueInput {
  id: ID
}
`
      }
    