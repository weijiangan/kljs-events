// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  activity: (where?: ActivityWhereInput) => Promise<boolean>;
  coordinates: (where?: CoordinatesWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  eventActivity: (where?: EventActivityWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  socialProfile: (where?: SocialProfileWhereInput) => Promise<boolean>;
  talk: (where?: TalkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  venue: (where?: VenueWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  activity: (where: ActivityWhereUniqueInput) => ActivityNullablePromise;
  activities: (args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Activity>;
  activitiesConnection: (args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivityConnectionPromise;
  coordinates: (
    where: CoordinatesWhereUniqueInput
  ) => CoordinatesNullablePromise;
  coordinateses: (args?: {
    where?: CoordinatesWhereInput;
    orderBy?: CoordinatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Coordinates>;
  coordinatesesConnection: (args?: {
    where?: CoordinatesWhereInput;
    orderBy?: CoordinatesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CoordinatesConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  eventActivity: (
    where: EventActivityWhereUniqueInput
  ) => EventActivityNullablePromise;
  eventActivities: (args?: {
    where?: EventActivityWhereInput;
    orderBy?: EventActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EventActivity>;
  eventActivitiesConnection: (args?: {
    where?: EventActivityWhereInput;
    orderBy?: EventActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventActivityConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkNullablePromise;
  links: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Link>;
  linksConnection: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LinkConnectionPromise;
  socialProfile: (
    where: SocialProfileWhereUniqueInput
  ) => SocialProfileNullablePromise;
  socialProfiles: (args?: {
    where?: SocialProfileWhereInput;
    orderBy?: SocialProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SocialProfile>;
  socialProfilesConnection: (args?: {
    where?: SocialProfileWhereInput;
    orderBy?: SocialProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SocialProfileConnectionPromise;
  talk: (where: TalkWhereUniqueInput) => TalkNullablePromise;
  talks: (args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Talk>;
  talksConnection: (args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TalkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  venue: (where: VenueWhereUniqueInput) => VenueNullablePromise;
  venues: (args?: {
    where?: VenueWhereInput;
    orderBy?: VenueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Venue>;
  venuesConnection: (args?: {
    where?: VenueWhereInput;
    orderBy?: VenueOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VenueConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActivity: (data: ActivityCreateInput) => ActivityPromise;
  updateActivity: (args: {
    data: ActivityUpdateInput;
    where: ActivityWhereUniqueInput;
  }) => ActivityPromise;
  updateManyActivities: (args: {
    data: ActivityUpdateManyMutationInput;
    where?: ActivityWhereInput;
  }) => BatchPayloadPromise;
  upsertActivity: (args: {
    where: ActivityWhereUniqueInput;
    create: ActivityCreateInput;
    update: ActivityUpdateInput;
  }) => ActivityPromise;
  deleteActivity: (where: ActivityWhereUniqueInput) => ActivityPromise;
  deleteManyActivities: (where?: ActivityWhereInput) => BatchPayloadPromise;
  createCoordinates: (data: CoordinatesCreateInput) => CoordinatesPromise;
  updateCoordinates: (args: {
    data: CoordinatesUpdateInput;
    where: CoordinatesWhereUniqueInput;
  }) => CoordinatesPromise;
  updateManyCoordinateses: (args: {
    data: CoordinatesUpdateManyMutationInput;
    where?: CoordinatesWhereInput;
  }) => BatchPayloadPromise;
  upsertCoordinates: (args: {
    where: CoordinatesWhereUniqueInput;
    create: CoordinatesCreateInput;
    update: CoordinatesUpdateInput;
  }) => CoordinatesPromise;
  deleteCoordinates: (where: CoordinatesWhereUniqueInput) => CoordinatesPromise;
  deleteManyCoordinateses: (
    where?: CoordinatesWhereInput
  ) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createEventActivity: (data: EventActivityCreateInput) => EventActivityPromise;
  updateEventActivity: (args: {
    data: EventActivityUpdateInput;
    where: EventActivityWhereUniqueInput;
  }) => EventActivityPromise;
  updateManyEventActivities: (args: {
    data: EventActivityUpdateManyMutationInput;
    where?: EventActivityWhereInput;
  }) => BatchPayloadPromise;
  upsertEventActivity: (args: {
    where: EventActivityWhereUniqueInput;
    create: EventActivityCreateInput;
    update: EventActivityUpdateInput;
  }) => EventActivityPromise;
  deleteEventActivity: (
    where: EventActivityWhereUniqueInput
  ) => EventActivityPromise;
  deleteManyEventActivities: (
    where?: EventActivityWhereInput
  ) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (args: {
    data: LinkUpdateInput;
    where: LinkWhereUniqueInput;
  }) => LinkPromise;
  updateManyLinks: (args: {
    data: LinkUpdateManyMutationInput;
    where?: LinkWhereInput;
  }) => BatchPayloadPromise;
  upsertLink: (args: {
    where: LinkWhereUniqueInput;
    create: LinkCreateInput;
    update: LinkUpdateInput;
  }) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createSocialProfile: (data: SocialProfileCreateInput) => SocialProfilePromise;
  updateSocialProfile: (args: {
    data: SocialProfileUpdateInput;
    where: SocialProfileWhereUniqueInput;
  }) => SocialProfilePromise;
  updateManySocialProfiles: (args: {
    data: SocialProfileUpdateManyMutationInput;
    where?: SocialProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertSocialProfile: (args: {
    where: SocialProfileWhereUniqueInput;
    create: SocialProfileCreateInput;
    update: SocialProfileUpdateInput;
  }) => SocialProfilePromise;
  deleteSocialProfile: (
    where: SocialProfileWhereUniqueInput
  ) => SocialProfilePromise;
  deleteManySocialProfiles: (
    where?: SocialProfileWhereInput
  ) => BatchPayloadPromise;
  createTalk: (data: TalkCreateInput) => TalkPromise;
  updateTalk: (args: {
    data: TalkUpdateInput;
    where: TalkWhereUniqueInput;
  }) => TalkPromise;
  updateManyTalks: (args: {
    data: TalkUpdateManyMutationInput;
    where?: TalkWhereInput;
  }) => BatchPayloadPromise;
  upsertTalk: (args: {
    where: TalkWhereUniqueInput;
    create: TalkCreateInput;
    update: TalkUpdateInput;
  }) => TalkPromise;
  deleteTalk: (where: TalkWhereUniqueInput) => TalkPromise;
  deleteManyTalks: (where?: TalkWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVenue: (data: VenueCreateInput) => VenuePromise;
  updateVenue: (args: {
    data: VenueUpdateInput;
    where: VenueWhereUniqueInput;
  }) => VenuePromise;
  updateManyVenues: (args: {
    data: VenueUpdateManyMutationInput;
    where?: VenueWhereInput;
  }) => BatchPayloadPromise;
  upsertVenue: (args: {
    where: VenueWhereUniqueInput;
    create: VenueCreateInput;
    update: VenueUpdateInput;
  }) => VenuePromise;
  deleteVenue: (where: VenueWhereUniqueInput) => VenuePromise;
  deleteManyVenues: (where?: VenueWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  activity: (
    where?: ActivitySubscriptionWhereInput
  ) => ActivitySubscriptionPayloadSubscription;
  coordinates: (
    where?: CoordinatesSubscriptionWhereInput
  ) => CoordinatesSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  eventActivity: (
    where?: EventActivitySubscriptionWhereInput
  ) => EventActivitySubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  socialProfile: (
    where?: SocialProfileSubscriptionWhereInput
  ) => SocialProfileSubscriptionPayloadSubscription;
  talk: (
    where?: TalkSubscriptionWhereInput
  ) => TalkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  venue: (
    where?: VenueSubscriptionWhereInput
  ) => VenueSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ActivityType = "TALK" | "BASIC";

export type LinkType = "YOUTUBE" | "SLIDES" | "OTHER";

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "url_ASC"
  | "url_DESC"
  | "description_ASC"
  | "description_DESC";

export type ActivityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "length_ASC"
  | "length_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CoordinatesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "x_ASC"
  | "x_DESC"
  | "y_ASC"
  | "y_DESC";

export type SocialNetworks =
  | "FACEBOOK"
  | "TWITTER"
  | "GITHUB"
  | "LINKEDIN"
  | "PERSONAL";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "middleName_ASC"
  | "middleName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "description_ASC"
  | "description_DESC";

export type SocialProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "value_ASC"
  | "value_DESC";

export type EventActivityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "order_ASC"
  | "order_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "timeStart_ASC"
  | "timeStart_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TalkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "remarks_ASC"
  | "remarks_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VenueOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "postcode_ASC"
  | "postcode_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "country_ASC"
  | "country_DESC"
  | "googPlaceId_ASC"
  | "googPlaceId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ActivityWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<LinkType>;
  type_not?: Maybe<LinkType>;
  type_in?: Maybe<LinkType[] | LinkType>;
  type_not_in?: Maybe<LinkType[] | LinkType>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  OR?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  NOT?: Maybe<LinkWhereInput[] | LinkWhereInput>;
}

export interface ActivityWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<ActivityType>;
  type_not?: Maybe<ActivityType>;
  type_in?: Maybe<ActivityType[] | ActivityType>;
  type_not_in?: Maybe<ActivityType[] | ActivityType>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  length?: Maybe<Int>;
  length_not?: Maybe<Int>;
  length_in?: Maybe<Int[] | Int>;
  length_not_in?: Maybe<Int[] | Int>;
  length_lt?: Maybe<Int>;
  length_lte?: Maybe<Int>;
  length_gt?: Maybe<Int>;
  length_gte?: Maybe<Int>;
  links_every?: Maybe<LinkWhereInput>;
  links_some?: Maybe<LinkWhereInput>;
  links_none?: Maybe<LinkWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
  OR?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
  NOT?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
}

export type CoordinatesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CoordinatesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  x?: Maybe<Float>;
  x_not?: Maybe<Float>;
  x_in?: Maybe<Float[] | Float>;
  x_not_in?: Maybe<Float[] | Float>;
  x_lt?: Maybe<Float>;
  x_lte?: Maybe<Float>;
  x_gt?: Maybe<Float>;
  x_gte?: Maybe<Float>;
  y?: Maybe<Float>;
  y_not?: Maybe<Float>;
  y_in?: Maybe<Float[] | Float>;
  y_not_in?: Maybe<Float[] | Float>;
  y_lt?: Maybe<Float>;
  y_lte?: Maybe<Float>;
  y_gt?: Maybe<Float>;
  y_gte?: Maybe<Float>;
  AND?: Maybe<CoordinatesWhereInput[] | CoordinatesWhereInput>;
  OR?: Maybe<CoordinatesWhereInput[] | CoordinatesWhereInput>;
  NOT?: Maybe<CoordinatesWhereInput[] | CoordinatesWhereInput>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  middleName?: Maybe<String>;
  middleName_not?: Maybe<String>;
  middleName_in?: Maybe<String[] | String>;
  middleName_not_in?: Maybe<String[] | String>;
  middleName_lt?: Maybe<String>;
  middleName_lte?: Maybe<String>;
  middleName_gt?: Maybe<String>;
  middleName_gte?: Maybe<String>;
  middleName_contains?: Maybe<String>;
  middleName_not_contains?: Maybe<String>;
  middleName_starts_with?: Maybe<String>;
  middleName_not_starts_with?: Maybe<String>;
  middleName_ends_with?: Maybe<String>;
  middleName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  socials_every?: Maybe<SocialProfileWhereInput>;
  socials_some?: Maybe<SocialProfileWhereInput>;
  socials_none?: Maybe<SocialProfileWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface SocialProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<SocialNetworks>;
  type_not?: Maybe<SocialNetworks>;
  type_in?: Maybe<SocialNetworks[] | SocialNetworks>;
  type_not_in?: Maybe<SocialNetworks[] | SocialNetworks>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<SocialProfileWhereInput[] | SocialProfileWhereInput>;
  OR?: Maybe<SocialProfileWhereInput[] | SocialProfileWhereInput>;
  NOT?: Maybe<SocialProfileWhereInput[] | SocialProfileWhereInput>;
}

export interface EventActivityWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  activity?: Maybe<ActivityWhereInput>;
  AND?: Maybe<EventActivityWhereInput[] | EventActivityWhereInput>;
  OR?: Maybe<EventActivityWhereInput[] | EventActivityWhereInput>;
  NOT?: Maybe<EventActivityWhereInput[] | EventActivityWhereInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  attendees_every?: Maybe<UserWhereInput>;
  attendees_some?: Maybe<UserWhereInput>;
  attendees_none?: Maybe<UserWhereInput>;
  organizer?: Maybe<UserWhereInput>;
  agenda_every?: Maybe<EventActivityWhereInput>;
  agenda_some?: Maybe<EventActivityWhereInput>;
  agenda_none?: Maybe<EventActivityWhereInput>;
  venue?: Maybe<VenueWhereInput>;
  timeStart?: Maybe<Int>;
  timeStart_not?: Maybe<Int>;
  timeStart_in?: Maybe<Int[] | Int>;
  timeStart_not_in?: Maybe<Int[] | Int>;
  timeStart_lt?: Maybe<Int>;
  timeStart_lte?: Maybe<Int>;
  timeStart_gt?: Maybe<Int>;
  timeStart_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface VenueWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  postcode?: Maybe<String>;
  postcode_not?: Maybe<String>;
  postcode_in?: Maybe<String[] | String>;
  postcode_not_in?: Maybe<String[] | String>;
  postcode_lt?: Maybe<String>;
  postcode_lte?: Maybe<String>;
  postcode_gt?: Maybe<String>;
  postcode_gte?: Maybe<String>;
  postcode_contains?: Maybe<String>;
  postcode_not_contains?: Maybe<String>;
  postcode_starts_with?: Maybe<String>;
  postcode_not_starts_with?: Maybe<String>;
  postcode_ends_with?: Maybe<String>;
  postcode_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  googPlaceId?: Maybe<String>;
  googPlaceId_not?: Maybe<String>;
  googPlaceId_in?: Maybe<String[] | String>;
  googPlaceId_not_in?: Maybe<String[] | String>;
  googPlaceId_lt?: Maybe<String>;
  googPlaceId_lte?: Maybe<String>;
  googPlaceId_gt?: Maybe<String>;
  googPlaceId_gte?: Maybe<String>;
  googPlaceId_contains?: Maybe<String>;
  googPlaceId_not_contains?: Maybe<String>;
  googPlaceId_starts_with?: Maybe<String>;
  googPlaceId_not_starts_with?: Maybe<String>;
  googPlaceId_ends_with?: Maybe<String>;
  googPlaceId_not_ends_with?: Maybe<String>;
  coords?: Maybe<CoordinatesWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<VenueWhereInput[] | VenueWhereInput>;
  OR?: Maybe<VenueWhereInput[] | VenueWhereInput>;
  NOT?: Maybe<VenueWhereInput[] | VenueWhereInput>;
}

export type EventActivityWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SocialProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TalkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TalkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  activity?: Maybe<ActivityWhereInput>;
  speaker?: Maybe<UserWhereInput>;
  remarks?: Maybe<String>;
  remarks_not?: Maybe<String>;
  remarks_in?: Maybe<String[] | String>;
  remarks_not_in?: Maybe<String[] | String>;
  remarks_lt?: Maybe<String>;
  remarks_lte?: Maybe<String>;
  remarks_gt?: Maybe<String>;
  remarks_gte?: Maybe<String>;
  remarks_contains?: Maybe<String>;
  remarks_not_contains?: Maybe<String>;
  remarks_starts_with?: Maybe<String>;
  remarks_not_starts_with?: Maybe<String>;
  remarks_ends_with?: Maybe<String>;
  remarks_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TalkWhereInput[] | TalkWhereInput>;
  OR?: Maybe<TalkWhereInput[] | TalkWhereInput>;
  NOT?: Maybe<TalkWhereInput[] | TalkWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type VenueWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ActivityCreateInput {
  id?: Maybe<ID_Input>;
  type: ActivityType;
  title: String;
  description?: Maybe<String>;
  length: Int;
  links?: Maybe<LinkCreateManyInput>;
}

export interface LinkCreateManyInput {
  create?: Maybe<LinkCreateInput[] | LinkCreateInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
}

export interface LinkCreateInput {
  id?: Maybe<ID_Input>;
  type: LinkType;
  url: String;
  description?: Maybe<String>;
}

export interface ActivityUpdateInput {
  type?: Maybe<ActivityType>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  length?: Maybe<Int>;
  links?: Maybe<LinkUpdateManyInput>;
}

export interface LinkUpdateManyInput {
  create?: Maybe<LinkCreateInput[] | LinkCreateInput>;
  update?: Maybe<
    | LinkUpdateWithWhereUniqueNestedInput[]
    | LinkUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | LinkUpsertWithWhereUniqueNestedInput[]
    | LinkUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  set?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  disconnect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  deleteMany?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  updateMany?: Maybe<
    LinkUpdateManyWithWhereNestedInput[] | LinkUpdateManyWithWhereNestedInput
  >;
}

export interface LinkUpdateWithWhereUniqueNestedInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateDataInput;
}

export interface LinkUpdateDataInput {
  type?: Maybe<LinkType>;
  url?: Maybe<String>;
  description?: Maybe<String>;
}

export interface LinkUpsertWithWhereUniqueNestedInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateDataInput;
  create: LinkCreateInput;
}

export interface LinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<LinkType>;
  type_not?: Maybe<LinkType>;
  type_in?: Maybe<LinkType[] | LinkType>;
  type_not_in?: Maybe<LinkType[] | LinkType>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  OR?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  NOT?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface LinkUpdateManyDataInput {
  type?: Maybe<LinkType>;
  url?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ActivityUpdateManyMutationInput {
  type?: Maybe<ActivityType>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  length?: Maybe<Int>;
}

export interface CoordinatesCreateInput {
  id?: Maybe<ID_Input>;
  x: Float;
  y: Float;
}

export interface CoordinatesUpdateInput {
  x?: Maybe<Float>;
  y?: Maybe<Float>;
}

export interface CoordinatesUpdateManyMutationInput {
  x?: Maybe<Float>;
  y?: Maybe<Float>;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  attendees?: Maybe<UserCreateManyInput>;
  organizer: UserCreateOneInput;
  agenda?: Maybe<EventActivityCreateManyInput>;
  venue?: Maybe<VenueCreateOneInput>;
  timeStart?: Maybe<Int>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  middleName?: Maybe<String>;
  email: String;
  password: String;
  description?: Maybe<String>;
  socials?: Maybe<SocialProfileCreateManyInput>;
}

export interface SocialProfileCreateManyInput {
  create?: Maybe<SocialProfileCreateInput[] | SocialProfileCreateInput>;
  connect?: Maybe<
    SocialProfileWhereUniqueInput[] | SocialProfileWhereUniqueInput
  >;
}

export interface SocialProfileCreateInput {
  id?: Maybe<ID_Input>;
  type: SocialNetworks;
  value: String;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EventActivityCreateManyInput {
  create?: Maybe<EventActivityCreateInput[] | EventActivityCreateInput>;
  connect?: Maybe<
    EventActivityWhereUniqueInput[] | EventActivityWhereUniqueInput
  >;
}

export interface EventActivityCreateInput {
  id?: Maybe<ID_Input>;
  order: Int;
  activity: ActivityCreateOneInput;
}

export interface ActivityCreateOneInput {
  create?: Maybe<ActivityCreateInput>;
  connect?: Maybe<ActivityWhereUniqueInput>;
}

export interface VenueCreateOneInput {
  create?: Maybe<VenueCreateInput>;
  connect?: Maybe<VenueWhereUniqueInput>;
}

export interface VenueCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  address: String;
  postcode: String;
  city: String;
  state: String;
  country: String;
  googPlaceId?: Maybe<String>;
  coords?: Maybe<CoordinatesCreateOneInput>;
}

export interface CoordinatesCreateOneInput {
  create?: Maybe<CoordinatesCreateInput>;
  connect?: Maybe<CoordinatesWhereUniqueInput>;
}

export interface EventUpdateInput {
  name?: Maybe<String>;
  attendees?: Maybe<UserUpdateManyInput>;
  organizer?: Maybe<UserUpdateOneRequiredInput>;
  agenda?: Maybe<EventActivityUpdateManyInput>;
  venue?: Maybe<VenueUpdateOneInput>;
  timeStart?: Maybe<Int>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  middleName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  description?: Maybe<String>;
  socials?: Maybe<SocialProfileUpdateManyInput>;
}

export interface SocialProfileUpdateManyInput {
  create?: Maybe<SocialProfileCreateInput[] | SocialProfileCreateInput>;
  update?: Maybe<
    | SocialProfileUpdateWithWhereUniqueNestedInput[]
    | SocialProfileUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | SocialProfileUpsertWithWhereUniqueNestedInput[]
    | SocialProfileUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    SocialProfileWhereUniqueInput[] | SocialProfileWhereUniqueInput
  >;
  connect?: Maybe<
    SocialProfileWhereUniqueInput[] | SocialProfileWhereUniqueInput
  >;
  set?: Maybe<SocialProfileWhereUniqueInput[] | SocialProfileWhereUniqueInput>;
  disconnect?: Maybe<
    SocialProfileWhereUniqueInput[] | SocialProfileWhereUniqueInput
  >;
  deleteMany?: Maybe<
    SocialProfileScalarWhereInput[] | SocialProfileScalarWhereInput
  >;
  updateMany?: Maybe<
    | SocialProfileUpdateManyWithWhereNestedInput[]
    | SocialProfileUpdateManyWithWhereNestedInput
  >;
}

export interface SocialProfileUpdateWithWhereUniqueNestedInput {
  where: SocialProfileWhereUniqueInput;
  data: SocialProfileUpdateDataInput;
}

export interface SocialProfileUpdateDataInput {
  type?: Maybe<SocialNetworks>;
  value?: Maybe<String>;
}

export interface SocialProfileUpsertWithWhereUniqueNestedInput {
  where: SocialProfileWhereUniqueInput;
  update: SocialProfileUpdateDataInput;
  create: SocialProfileCreateInput;
}

export interface SocialProfileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<SocialNetworks>;
  type_not?: Maybe<SocialNetworks>;
  type_in?: Maybe<SocialNetworks[] | SocialNetworks>;
  type_not_in?: Maybe<SocialNetworks[] | SocialNetworks>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  AND?: Maybe<SocialProfileScalarWhereInput[] | SocialProfileScalarWhereInput>;
  OR?: Maybe<SocialProfileScalarWhereInput[] | SocialProfileScalarWhereInput>;
  NOT?: Maybe<SocialProfileScalarWhereInput[] | SocialProfileScalarWhereInput>;
}

export interface SocialProfileUpdateManyWithWhereNestedInput {
  where: SocialProfileScalarWhereInput;
  data: SocialProfileUpdateManyDataInput;
}

export interface SocialProfileUpdateManyDataInput {
  type?: Maybe<SocialNetworks>;
  value?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  middleName?: Maybe<String>;
  middleName_not?: Maybe<String>;
  middleName_in?: Maybe<String[] | String>;
  middleName_not_in?: Maybe<String[] | String>;
  middleName_lt?: Maybe<String>;
  middleName_lte?: Maybe<String>;
  middleName_gt?: Maybe<String>;
  middleName_gte?: Maybe<String>;
  middleName_contains?: Maybe<String>;
  middleName_not_contains?: Maybe<String>;
  middleName_starts_with?: Maybe<String>;
  middleName_not_starts_with?: Maybe<String>;
  middleName_ends_with?: Maybe<String>;
  middleName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  middleName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface EventActivityUpdateManyInput {
  create?: Maybe<EventActivityCreateInput[] | EventActivityCreateInput>;
  update?: Maybe<
    | EventActivityUpdateWithWhereUniqueNestedInput[]
    | EventActivityUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | EventActivityUpsertWithWhereUniqueNestedInput[]
    | EventActivityUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    EventActivityWhereUniqueInput[] | EventActivityWhereUniqueInput
  >;
  connect?: Maybe<
    EventActivityWhereUniqueInput[] | EventActivityWhereUniqueInput
  >;
  set?: Maybe<EventActivityWhereUniqueInput[] | EventActivityWhereUniqueInput>;
  disconnect?: Maybe<
    EventActivityWhereUniqueInput[] | EventActivityWhereUniqueInput
  >;
  deleteMany?: Maybe<
    EventActivityScalarWhereInput[] | EventActivityScalarWhereInput
  >;
  updateMany?: Maybe<
    | EventActivityUpdateManyWithWhereNestedInput[]
    | EventActivityUpdateManyWithWhereNestedInput
  >;
}

export interface EventActivityUpdateWithWhereUniqueNestedInput {
  where: EventActivityWhereUniqueInput;
  data: EventActivityUpdateDataInput;
}

export interface EventActivityUpdateDataInput {
  order?: Maybe<Int>;
  activity?: Maybe<ActivityUpdateOneRequiredInput>;
}

export interface ActivityUpdateOneRequiredInput {
  create?: Maybe<ActivityCreateInput>;
  update?: Maybe<ActivityUpdateDataInput>;
  upsert?: Maybe<ActivityUpsertNestedInput>;
  connect?: Maybe<ActivityWhereUniqueInput>;
}

export interface ActivityUpdateDataInput {
  type?: Maybe<ActivityType>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  length?: Maybe<Int>;
  links?: Maybe<LinkUpdateManyInput>;
}

export interface ActivityUpsertNestedInput {
  update: ActivityUpdateDataInput;
  create: ActivityCreateInput;
}

export interface EventActivityUpsertWithWhereUniqueNestedInput {
  where: EventActivityWhereUniqueInput;
  update: EventActivityUpdateDataInput;
  create: EventActivityCreateInput;
}

export interface EventActivityScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<EventActivityScalarWhereInput[] | EventActivityScalarWhereInput>;
  OR?: Maybe<EventActivityScalarWhereInput[] | EventActivityScalarWhereInput>;
  NOT?: Maybe<EventActivityScalarWhereInput[] | EventActivityScalarWhereInput>;
}

export interface EventActivityUpdateManyWithWhereNestedInput {
  where: EventActivityScalarWhereInput;
  data: EventActivityUpdateManyDataInput;
}

export interface EventActivityUpdateManyDataInput {
  order?: Maybe<Int>;
}

export interface VenueUpdateOneInput {
  create?: Maybe<VenueCreateInput>;
  update?: Maybe<VenueUpdateDataInput>;
  upsert?: Maybe<VenueUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<VenueWhereUniqueInput>;
}

export interface VenueUpdateDataInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  postcode?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  country?: Maybe<String>;
  googPlaceId?: Maybe<String>;
  coords?: Maybe<CoordinatesUpdateOneInput>;
}

export interface CoordinatesUpdateOneInput {
  create?: Maybe<CoordinatesCreateInput>;
  update?: Maybe<CoordinatesUpdateDataInput>;
  upsert?: Maybe<CoordinatesUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CoordinatesWhereUniqueInput>;
}

export interface CoordinatesUpdateDataInput {
  x?: Maybe<Float>;
  y?: Maybe<Float>;
}

export interface CoordinatesUpsertNestedInput {
  update: CoordinatesUpdateDataInput;
  create: CoordinatesCreateInput;
}

export interface VenueUpsertNestedInput {
  update: VenueUpdateDataInput;
  create: VenueCreateInput;
}

export interface EventUpdateManyMutationInput {
  name?: Maybe<String>;
  timeStart?: Maybe<Int>;
}

export interface EventActivityUpdateInput {
  order?: Maybe<Int>;
  activity?: Maybe<ActivityUpdateOneRequiredInput>;
}

export interface EventActivityUpdateManyMutationInput {
  order?: Maybe<Int>;
}

export interface LinkUpdateInput {
  type?: Maybe<LinkType>;
  url?: Maybe<String>;
  description?: Maybe<String>;
}

export interface LinkUpdateManyMutationInput {
  type?: Maybe<LinkType>;
  url?: Maybe<String>;
  description?: Maybe<String>;
}

export interface SocialProfileUpdateInput {
  type?: Maybe<SocialNetworks>;
  value?: Maybe<String>;
}

export interface SocialProfileUpdateManyMutationInput {
  type?: Maybe<SocialNetworks>;
  value?: Maybe<String>;
}

export interface TalkCreateInput {
  id?: Maybe<ID_Input>;
  activity: ActivityCreateOneInput;
  speaker: UserCreateOneInput;
  remarks?: Maybe<String>;
}

export interface TalkUpdateInput {
  activity?: Maybe<ActivityUpdateOneRequiredInput>;
  speaker?: Maybe<UserUpdateOneRequiredInput>;
  remarks?: Maybe<String>;
}

export interface TalkUpdateManyMutationInput {
  remarks?: Maybe<String>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  middleName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  description?: Maybe<String>;
  socials?: Maybe<SocialProfileUpdateManyInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  middleName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  description?: Maybe<String>;
}

export interface VenueUpdateInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  postcode?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  country?: Maybe<String>;
  googPlaceId?: Maybe<String>;
  coords?: Maybe<CoordinatesUpdateOneInput>;
}

export interface VenueUpdateManyMutationInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  postcode?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  country?: Maybe<String>;
  googPlaceId?: Maybe<String>;
}

export interface ActivitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActivityWhereInput>;
  AND?: Maybe<
    ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput
  >;
  OR?: Maybe<ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput>;
  NOT?: Maybe<
    ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput
  >;
}

export interface CoordinatesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CoordinatesWhereInput>;
  AND?: Maybe<
    CoordinatesSubscriptionWhereInput[] | CoordinatesSubscriptionWhereInput
  >;
  OR?: Maybe<
    CoordinatesSubscriptionWhereInput[] | CoordinatesSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CoordinatesSubscriptionWhereInput[] | CoordinatesSubscriptionWhereInput
  >;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface EventActivitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventActivityWhereInput>;
  AND?: Maybe<
    EventActivitySubscriptionWhereInput[] | EventActivitySubscriptionWhereInput
  >;
  OR?: Maybe<
    EventActivitySubscriptionWhereInput[] | EventActivitySubscriptionWhereInput
  >;
  NOT?: Maybe<
    EventActivitySubscriptionWhereInput[] | EventActivitySubscriptionWhereInput
  >;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LinkWhereInput>;
  AND?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  OR?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  NOT?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
}

export interface SocialProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SocialProfileWhereInput>;
  AND?: Maybe<
    SocialProfileSubscriptionWhereInput[] | SocialProfileSubscriptionWhereInput
  >;
  OR?: Maybe<
    SocialProfileSubscriptionWhereInput[] | SocialProfileSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SocialProfileSubscriptionWhereInput[] | SocialProfileSubscriptionWhereInput
  >;
}

export interface TalkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TalkWhereInput>;
  AND?: Maybe<TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput>;
  OR?: Maybe<TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput>;
  NOT?: Maybe<TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VenueSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VenueWhereInput>;
  AND?: Maybe<VenueSubscriptionWhereInput[] | VenueSubscriptionWhereInput>;
  OR?: Maybe<VenueSubscriptionWhereInput[] | VenueSubscriptionWhereInput>;
  NOT?: Maybe<VenueSubscriptionWhereInput[] | VenueSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Activity {
  id: ID_Output;
  type: ActivityType;
  title: String;
  description?: String;
  length: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ActivityPromise extends Promise<Activity>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ActivityType>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  length: () => Promise<Int>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ActivitySubscription
  extends Promise<AsyncIterator<Activity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ActivityType>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  length: () => Promise<AsyncIterator<Int>>;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActivityNullablePromise
  extends Promise<Activity | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ActivityType>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  length: () => Promise<Int>;
  links: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Link {
  id: ID_Output;
  type: LinkType;
  url: String;
  description?: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<LinkType>;
  url: () => Promise<String>;
  description: () => Promise<String>;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<LinkType>>;
  url: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface LinkNullablePromise
  extends Promise<Link | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<LinkType>;
  url: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ActivityConnection {
  pageInfo: PageInfo;
  edges: ActivityEdge[];
}

export interface ActivityConnectionPromise
  extends Promise<ActivityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityEdge>>() => T;
  aggregate: <T = AggregateActivityPromise>() => T;
}

export interface ActivityConnectionSubscription
  extends Promise<AsyncIterator<ActivityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivitySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivityEdge {
  node: Activity;
  cursor: String;
}

export interface ActivityEdgePromise
  extends Promise<ActivityEdge>,
    Fragmentable {
  node: <T = ActivityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityEdgeSubscription
  extends Promise<AsyncIterator<ActivityEdge>>,
    Fragmentable {
  node: <T = ActivitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateActivity {
  count: Int;
}

export interface AggregateActivityPromise
  extends Promise<AggregateActivity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivitySubscription
  extends Promise<AsyncIterator<AggregateActivity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Coordinates {
  id: ID_Output;
  x: Float;
  y: Float;
}

export interface CoordinatesPromise extends Promise<Coordinates>, Fragmentable {
  id: () => Promise<ID_Output>;
  x: () => Promise<Float>;
  y: () => Promise<Float>;
}

export interface CoordinatesSubscription
  extends Promise<AsyncIterator<Coordinates>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  x: () => Promise<AsyncIterator<Float>>;
  y: () => Promise<AsyncIterator<Float>>;
}

export interface CoordinatesNullablePromise
  extends Promise<Coordinates | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  x: () => Promise<Float>;
  y: () => Promise<Float>;
}

export interface CoordinatesConnection {
  pageInfo: PageInfo;
  edges: CoordinatesEdge[];
}

export interface CoordinatesConnectionPromise
  extends Promise<CoordinatesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CoordinatesEdge>>() => T;
  aggregate: <T = AggregateCoordinatesPromise>() => T;
}

export interface CoordinatesConnectionSubscription
  extends Promise<AsyncIterator<CoordinatesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CoordinatesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCoordinatesSubscription>() => T;
}

export interface CoordinatesEdge {
  node: Coordinates;
  cursor: String;
}

export interface CoordinatesEdgePromise
  extends Promise<CoordinatesEdge>,
    Fragmentable {
  node: <T = CoordinatesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CoordinatesEdgeSubscription
  extends Promise<AsyncIterator<CoordinatesEdge>>,
    Fragmentable {
  node: <T = CoordinatesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCoordinates {
  count: Int;
}

export interface AggregateCoordinatesPromise
  extends Promise<AggregateCoordinates>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCoordinatesSubscription
  extends Promise<AsyncIterator<AggregateCoordinates>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Event {
  id: ID_Output;
  name: String;
  timeStart?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  attendees: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organizer: <T = UserPromise>() => T;
  agenda: <T = FragmentableArray<EventActivity>>(args?: {
    where?: EventActivityWhereInput;
    orderBy?: EventActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  venue: <T = VenuePromise>() => T;
  timeStart: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  attendees: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organizer: <T = UserSubscription>() => T;
  agenda: <T = Promise<AsyncIterator<EventActivitySubscription>>>(args?: {
    where?: EventActivityWhereInput;
    orderBy?: EventActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  venue: <T = VenueSubscription>() => T;
  timeStart: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  attendees: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organizer: <T = UserPromise>() => T;
  agenda: <T = FragmentableArray<EventActivity>>(args?: {
    where?: EventActivityWhereInput;
    orderBy?: EventActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  venue: <T = VenuePromise>() => T;
  timeStart: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  middleName?: String;
  email: String;
  password: String;
  description?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  middleName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  description: () => Promise<String>;
  socials: <T = FragmentableArray<SocialProfile>>(args?: {
    where?: SocialProfileWhereInput;
    orderBy?: SocialProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  socials: <T = Promise<AsyncIterator<SocialProfileSubscription>>>(args?: {
    where?: SocialProfileWhereInput;
    orderBy?: SocialProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  middleName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  description: () => Promise<String>;
  socials: <T = FragmentableArray<SocialProfile>>(args?: {
    where?: SocialProfileWhereInput;
    orderBy?: SocialProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SocialProfile {
  id: ID_Output;
  type: SocialNetworks;
  value: String;
}

export interface SocialProfilePromise
  extends Promise<SocialProfile>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<SocialNetworks>;
  value: () => Promise<String>;
}

export interface SocialProfileSubscription
  extends Promise<AsyncIterator<SocialProfile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<SocialNetworks>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface SocialProfileNullablePromise
  extends Promise<SocialProfile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<SocialNetworks>;
  value: () => Promise<String>;
}

export interface EventActivity {
  id: ID_Output;
  order: Int;
}

export interface EventActivityPromise
  extends Promise<EventActivity>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  order: () => Promise<Int>;
  activity: <T = ActivityPromise>() => T;
}

export interface EventActivitySubscription
  extends Promise<AsyncIterator<EventActivity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  order: () => Promise<AsyncIterator<Int>>;
  activity: <T = ActivitySubscription>() => T;
}

export interface EventActivityNullablePromise
  extends Promise<EventActivity | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  order: () => Promise<Int>;
  activity: <T = ActivityPromise>() => T;
}

export interface Venue {
  id: ID_Output;
  name: String;
  address: String;
  postcode: String;
  city: String;
  state: String;
  country: String;
  googPlaceId?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VenuePromise extends Promise<Venue>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  postcode: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  googPlaceId: () => Promise<String>;
  coords: <T = CoordinatesPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VenueSubscription
  extends Promise<AsyncIterator<Venue>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  postcode: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  googPlaceId: () => Promise<AsyncIterator<String>>;
  coords: <T = CoordinatesSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VenueNullablePromise
  extends Promise<Venue | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  postcode: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  googPlaceId: () => Promise<String>;
  coords: <T = CoordinatesPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventActivityConnection {
  pageInfo: PageInfo;
  edges: EventActivityEdge[];
}

export interface EventActivityConnectionPromise
  extends Promise<EventActivityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventActivityEdge>>() => T;
  aggregate: <T = AggregateEventActivityPromise>() => T;
}

export interface EventActivityConnectionSubscription
  extends Promise<AsyncIterator<EventActivityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventActivityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventActivitySubscription>() => T;
}

export interface EventActivityEdge {
  node: EventActivity;
  cursor: String;
}

export interface EventActivityEdgePromise
  extends Promise<EventActivityEdge>,
    Fragmentable {
  node: <T = EventActivityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventActivityEdgeSubscription
  extends Promise<AsyncIterator<EventActivityEdge>>,
    Fragmentable {
  node: <T = EventActivitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEventActivity {
  count: Int;
}

export interface AggregateEventActivityPromise
  extends Promise<AggregateEventActivity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventActivitySubscription
  extends Promise<AsyncIterator<AggregateEventActivity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SocialProfileConnection {
  pageInfo: PageInfo;
  edges: SocialProfileEdge[];
}

export interface SocialProfileConnectionPromise
  extends Promise<SocialProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SocialProfileEdge>>() => T;
  aggregate: <T = AggregateSocialProfilePromise>() => T;
}

export interface SocialProfileConnectionSubscription
  extends Promise<AsyncIterator<SocialProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SocialProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSocialProfileSubscription>() => T;
}

export interface SocialProfileEdge {
  node: SocialProfile;
  cursor: String;
}

export interface SocialProfileEdgePromise
  extends Promise<SocialProfileEdge>,
    Fragmentable {
  node: <T = SocialProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SocialProfileEdgeSubscription
  extends Promise<AsyncIterator<SocialProfileEdge>>,
    Fragmentable {
  node: <T = SocialProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSocialProfile {
  count: Int;
}

export interface AggregateSocialProfilePromise
  extends Promise<AggregateSocialProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSocialProfileSubscription
  extends Promise<AsyncIterator<AggregateSocialProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Talk {
  id: ID_Output;
  remarks?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkPromise extends Promise<Talk>, Fragmentable {
  id: () => Promise<ID_Output>;
  activity: <T = ActivityPromise>() => T;
  speaker: <T = UserPromise>() => T;
  remarks: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkSubscription
  extends Promise<AsyncIterator<Talk>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  activity: <T = ActivitySubscription>() => T;
  speaker: <T = UserSubscription>() => T;
  remarks: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TalkNullablePromise
  extends Promise<Talk | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  activity: <T = ActivityPromise>() => T;
  speaker: <T = UserPromise>() => T;
  remarks: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkConnection {
  pageInfo: PageInfo;
  edges: TalkEdge[];
}

export interface TalkConnectionPromise
  extends Promise<TalkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TalkEdge>>() => T;
  aggregate: <T = AggregateTalkPromise>() => T;
}

export interface TalkConnectionSubscription
  extends Promise<AsyncIterator<TalkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TalkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTalkSubscription>() => T;
}

export interface TalkEdge {
  node: Talk;
  cursor: String;
}

export interface TalkEdgePromise extends Promise<TalkEdge>, Fragmentable {
  node: <T = TalkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TalkEdgeSubscription
  extends Promise<AsyncIterator<TalkEdge>>,
    Fragmentable {
  node: <T = TalkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTalk {
  count: Int;
}

export interface AggregateTalkPromise
  extends Promise<AggregateTalk>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTalkSubscription
  extends Promise<AsyncIterator<AggregateTalk>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VenueConnection {
  pageInfo: PageInfo;
  edges: VenueEdge[];
}

export interface VenueConnectionPromise
  extends Promise<VenueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VenueEdge>>() => T;
  aggregate: <T = AggregateVenuePromise>() => T;
}

export interface VenueConnectionSubscription
  extends Promise<AsyncIterator<VenueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VenueEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVenueSubscription>() => T;
}

export interface VenueEdge {
  node: Venue;
  cursor: String;
}

export interface VenueEdgePromise extends Promise<VenueEdge>, Fragmentable {
  node: <T = VenuePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VenueEdgeSubscription
  extends Promise<AsyncIterator<VenueEdge>>,
    Fragmentable {
  node: <T = VenueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVenue {
  count: Int;
}

export interface AggregateVenuePromise
  extends Promise<AggregateVenue>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVenueSubscription
  extends Promise<AsyncIterator<AggregateVenue>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ActivitySubscriptionPayload {
  mutation: MutationType;
  node: Activity;
  updatedFields: String[];
  previousValues: ActivityPreviousValues;
}

export interface ActivitySubscriptionPayloadPromise
  extends Promise<ActivitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivityPreviousValuesPromise>() => T;
}

export interface ActivitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivityPreviousValuesSubscription>() => T;
}

export interface ActivityPreviousValues {
  id: ID_Output;
  type: ActivityType;
  title: String;
  description?: String;
  length: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ActivityPreviousValuesPromise
  extends Promise<ActivityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ActivityType>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  length: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ActivityPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ActivityType>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  length: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CoordinatesSubscriptionPayload {
  mutation: MutationType;
  node: Coordinates;
  updatedFields: String[];
  previousValues: CoordinatesPreviousValues;
}

export interface CoordinatesSubscriptionPayloadPromise
  extends Promise<CoordinatesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoordinatesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoordinatesPreviousValuesPromise>() => T;
}

export interface CoordinatesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CoordinatesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CoordinatesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoordinatesPreviousValuesSubscription>() => T;
}

export interface CoordinatesPreviousValues {
  id: ID_Output;
  x: Float;
  y: Float;
}

export interface CoordinatesPreviousValuesPromise
  extends Promise<CoordinatesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  x: () => Promise<Float>;
  y: () => Promise<Float>;
}

export interface CoordinatesPreviousValuesSubscription
  extends Promise<AsyncIterator<CoordinatesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  x: () => Promise<AsyncIterator<Float>>;
  y: () => Promise<AsyncIterator<Float>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  name: String;
  timeStart?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  timeStart: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  timeStart: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventActivitySubscriptionPayload {
  mutation: MutationType;
  node: EventActivity;
  updatedFields: String[];
  previousValues: EventActivityPreviousValues;
}

export interface EventActivitySubscriptionPayloadPromise
  extends Promise<EventActivitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventActivityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventActivityPreviousValuesPromise>() => T;
}

export interface EventActivitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventActivitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventActivitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventActivityPreviousValuesSubscription>() => T;
}

export interface EventActivityPreviousValues {
  id: ID_Output;
  order: Int;
}

export interface EventActivityPreviousValuesPromise
  extends Promise<EventActivityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  order: () => Promise<Int>;
}

export interface EventActivityPreviousValuesSubscription
  extends Promise<AsyncIterator<EventActivityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  type: LinkType;
  url: String;
  description?: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<LinkType>;
  url: () => Promise<String>;
  description: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<LinkType>>;
  url: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface SocialProfileSubscriptionPayload {
  mutation: MutationType;
  node: SocialProfile;
  updatedFields: String[];
  previousValues: SocialProfilePreviousValues;
}

export interface SocialProfileSubscriptionPayloadPromise
  extends Promise<SocialProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SocialProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SocialProfilePreviousValuesPromise>() => T;
}

export interface SocialProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SocialProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SocialProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SocialProfilePreviousValuesSubscription>() => T;
}

export interface SocialProfilePreviousValues {
  id: ID_Output;
  type: SocialNetworks;
  value: String;
}

export interface SocialProfilePreviousValuesPromise
  extends Promise<SocialProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<SocialNetworks>;
  value: () => Promise<String>;
}

export interface SocialProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<SocialProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<SocialNetworks>>;
  value: () => Promise<AsyncIterator<String>>;
}

export interface TalkSubscriptionPayload {
  mutation: MutationType;
  node: Talk;
  updatedFields: String[];
  previousValues: TalkPreviousValues;
}

export interface TalkSubscriptionPayloadPromise
  extends Promise<TalkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TalkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TalkPreviousValuesPromise>() => T;
}

export interface TalkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TalkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TalkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TalkPreviousValuesSubscription>() => T;
}

export interface TalkPreviousValues {
  id: ID_Output;
  remarks?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkPreviousValuesPromise
  extends Promise<TalkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  remarks: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkPreviousValuesSubscription
  extends Promise<AsyncIterator<TalkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  remarks: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  middleName?: String;
  email: String;
  password: String;
  description?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  middleName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  description: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface VenueSubscriptionPayload {
  mutation: MutationType;
  node: Venue;
  updatedFields: String[];
  previousValues: VenuePreviousValues;
}

export interface VenueSubscriptionPayloadPromise
  extends Promise<VenueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VenuePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VenuePreviousValuesPromise>() => T;
}

export interface VenueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VenueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VenueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VenuePreviousValuesSubscription>() => T;
}

export interface VenuePreviousValues {
  id: ID_Output;
  name: String;
  address: String;
  postcode: String;
  city: String;
  state: String;
  country: String;
  googPlaceId?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VenuePreviousValuesPromise
  extends Promise<VenuePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  postcode: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  googPlaceId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VenuePreviousValuesSubscription
  extends Promise<AsyncIterator<VenuePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  postcode: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  googPlaceId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "EventActivity",
    embedded: false
  },
  {
    name: "Activity",
    embedded: false
  },
  {
    name: "ActivityType",
    embedded: false
  },
  {
    name: "Link",
    embedded: false
  },
  {
    name: "LinkType",
    embedded: false
  },
  {
    name: "Talk",
    embedded: false
  },
  {
    name: "SocialProfile",
    embedded: false
  },
  {
    name: "SocialNetworks",
    embedded: false
  },
  {
    name: "Venue",
    embedded: false
  },
  {
    name: "Coordinates",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
