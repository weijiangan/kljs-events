type Query {
  events: [Event!]!
  event(id: ID!): Event
  users: [User!]!
  user(id: ID!): User
  talks: [Talk!]!
  talk(id: ID!): Talk
  latestEvent: Event
}

type Mutation {
  createEvent(name: String!): Event
  # updateEvent(
  #   eventId: String!
  #   name: String
  #   talks: [ID!]
  #   venue: VenueInput
  #   timeStart: Int
  # ): Event
  createTalk(data: TalkInput!): Talk
  updateTalk(data: TalkInput!): Talk
  attendEvent(eventId: String!): Event
  signup(name: String!, email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  changePassword(
    oldpassword: String!
    password: String!
    password2: String!
  ): Int
}

type Subscription {
  updateEvent: Event
}

type User {
  id: ID!
  name: String!
  email: String!
  description: String
  socials: [SocialProfile!]!
}

input UserInput {
  id: ID
  email: String
}

type Event {
  id: ID!
  name: String!
  attendees: [User!]!
  organizer: User!
  agenda: [EventActivity!]
  venue: Venue
  timeStart: Int
}

union AllActivity = Activity | Talk

type EventActivity {
  id: ID!
  order: Int!
  activity: AllActivity!
}

type Activity {
  id: ID!
  type: ActivityType!
  title: String!
  description: String
  length: Int!
  links: [Link!]!
  createdAt: Int!
  updatedAt: Int!
}

type Link {
  id: ID!
  type: LinkType!
  url: String!
  description: String
}

enum LinkType {
  YOUTUBE
  SLIDES
  OTHER
}

enum ActivityType {
  TALK
  BASIC
}

type Talk {
  id: ID!
  activity: Activity!
  speaker: User!
  remarks: String
  createdAt: Int!
  updatedAt: Int!
}

type AuthPayload {
  token: String
  user: User
}

input TalkInput {
  title: String!
  description: String!
  speaker: UserInput!
  length: Int!
  remarks: String
}

type SocialProfile {
  id: ID!
  type: SocialNetworks!
  value: String!
}

enum SocialNetworks {
  FACEBOOK
  TWITTER
  GITHUB
  LINKEDIN
  PERSONAL
}

type Venue {
  id: ID!
  name: String!
  address: String!
  city: String!
  postcode: String!
  state: String!
  googPlaceId: String
  coords: Coordinates
}

input VenueInput {
  name: String!
  address: String!
  googPlaceId: String
  coords: CoordinatesInput
}

type Coordinates {
  x: Float!
  y: Float!
}

input CoordinatesInput {
  x: Float!
  y: Float!
}
